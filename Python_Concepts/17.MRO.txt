Method resolution order in Python inheritance-

class A:
    def process(self):
        print('A process()')

class B:
    pass

class C(A, B):
    pass

obj = C()  
obj.process()    
print(C.mro())   # print MRO for class C (C > A > B)


Normal Rule- visit super class first and its super classes from left to right manner


This is where Python applies a simple rule that says (known as good head question) when in MRO we have a super class before subclass then it must be removed from that position in MRO.


class A:
    def process(self):
        print('A process()')

class B(A):
    def process(self):
        print('B process()')

class C(A, B):
    pass

obj = C()
obj.process()

This MRO will error.

Here MRO will be- C A B A
But according to python rule- C B A
But this is also invalidating inheritance's left first call rule so python will throw error
