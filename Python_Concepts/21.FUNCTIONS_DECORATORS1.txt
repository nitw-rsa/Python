Functions and methods are called callable as they can be called.


In fact, any object which implements the special method __call__() is callable.
So, in the most basic sense, a decorator is a callable that returns a callable.


A magic decorator which will work for all the functions.

def works_for_all(func):
    def inner(*args, **kwargs):
        print("I can decorate any function")
        return func(*args, **kwargs)
    return inner


Decorator chaining:-

def star(func):
    def inner(*args, **kwargs):
        print("*" * 30)
        func(*args, **kwargs)
        print("*" * 30)
    return inner

def percent(func):
    def inner(*args, **kwargs):
        print("%" * 30)
        func(*args, **kwargs)
        print("%" * 30)
    return inner

@star
@percent
def printer(msg):
    print(msg)
printer("Hello")

This is equivalent to:-
def printer(msg):
    print(msg)
printer = star(percent(printer))
