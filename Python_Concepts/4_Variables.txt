def fun()
	print(s)            ------------------ if we remove this it will work or declare global s here
	s = "rishabh"
	print(s)

s = "sharma"
fun()
print(s)


Packing and Unpacking-

def function1(a, b, c):
	print(a+b+c)
	
def function2(*args):  -----------------> packing (type of args is tuple)
	args = list(args)
	args[0] = '1'
	args[1] = '2'
	function1(*args)  ------------------> unpacking (either tuple, list or set)

function2("hello", "rishabh", "3")


Unpacking for dictionary-

def function(a, b, c):
	print(a, b, c)

d = {'a':2, 'b':3, 'c':4} -------- a here and a in function must be same
function(**d)


Packing for dictionary-

def function(**kwargs):
	print(type(kwargs)) ---- dictionary-
	for keys in kwargs:
		print(key, kwargs[key])
		
function(name="rishabh", company="amazon")


dict()----- can convert a tuple of order (key, value) in dictionary.


						encode
   ___________________________________________________
  |                                                   |
String                                               Byte ----------- can directly stored on disk ASCII, UTF-8
  |___________________________________________________|
  
						decode
						

__name__ in python-					
If the source file is executed as the main program, the interpreter sets the __name__ variable to have a value “__main__”.
If this file is being imported from another module, __name__ will be set to the module’s name.
__name__ is a built-in variable which evaluates to the name of the current module.
Thus it can be used to check whether the current script is being run on its own or being imported somewhere else.


Underscore in python-

Single-
1.) in interpreter ----- returns value of last excuted expression
2.) after a name ------- to avoid confusion between reserved keywords and user defined keywords
3.) before a name ------ 

Double-
1.) leading double
2.) before and after double
3.) after double  ------- to avoid confusion between reserved keywords and user defined keywords
