enumerate() ----- used for looping
zip() ----------- used to combine same containers (list-list and dict-dict)
items() --------- used on dict to iterate


Iterators in python-
Any python type that can be used in for in loop. eg- list, string, dict, set, tuple
All iterators types must implement following 2 methods-
    1.) __iter__()----- method that is called on initialization of an iterator. This should return an object that has a __next__ method.
    2.) __next__()----- The iterator next method should return the next value for the iterable.
When an iterator is used with a ‘for in’ loop, the for loop implicitly calls next() on the iterator object.
This method should raise a StopIteration to signal the end of the iteration.

class Test:
	def __init__(self, lim):
		self.lim = lim
		
	def __iter__(self):
		self.x = 5
		return self

	def __next__(self):
		x = self.x
		# Stop iteration if limit is reached
		if x > self.lim:
			raise StopIteration

        # Else increment and return old value 
		self.x = x + 1;
		return x

t = Test(20)

for i in t:
	print(i)


zip() is used to combine and unpack to similar iterators.


iter(object) ----- returns iterator object


class Counter: 
    def __init__(self, start, end): 
        self.num = start 
        self.end = end 
  
    def __iter__(self): 
        return self
  
    def __next__(self):  
        if self.num > self.end: 
            raise StopIteration 
        else: 
            self.num += 1
            return self.num - 1
              
# Driver code 
if __name__ == '__main__' : 
      
    a, b = 2, 5
      
    c1 = Counter(a, b) 
    c2 = Counter(a, b) 
      
    # Way 1-to print the range without iter() 
    print ("Print the range without iter()") 
      
    for i in c1: 
        print ("Eating more Pizzas, couting ", i, end ="\n") 
      
    print ("\nPrint the range using iter()\n") 
      
    # Way 2- using iter()
    obj = iter(c2)
    try: 
        while True: # Print till error raised 
            print ("Eating more Pizzas, couting ", next(obj)) 
    except:  
        # when StopIteration raised, Print custom message 
        print ("\nDead on overfood, GAME OVER")  


Enumerator is a built in python function that takes input as iterator and returnds tuple containing index and data at index.


__iter__() returns an iterator for the given object.
so next() can be called on that object.

eg:-
list = [1,2,3,4,5]
obj = list.__iter__() or iter(list)
print(next(obj)) or print(obj.__next__())


Iterable is an object which can be iterate over.


Every iterator is iterable but every iterable is not iterator. Eg:- list


The object on which we can call next() is iterator.


Iterable- is to which we can iterate.


Generators in python---

1.) Generator functions- are normal functions with yield keyword instead of return.
 If the body of a def contains yield, the function automatically becomes a generator function.
 
2.) Generator object- generator functions return generator objects. Generator objects are iterable so we can call __next__() function
on them or we can use them in for in loop.

def simpleGeneratorFun(): 
    yield 1
    yield 2
    yield 3
   
# x is a generator object 
x = simpleGeneratorFun()
  
# Iterating over the generator object using next 
print(x.next()); # In Python 3, __next__() 
print(x.next()); 
print(x.next()); 


Unlike regular functions which on encountering a return statement terminates entirely, generators use yield statement in which the state of the function is saved from the last call and can be picked up or resumed the next time we call a generator function. Another great advantage of the generator over a list is that it takes much less memory.


Generator Expressions-----
There are various other expressions that can be simply coded similar to list comprehensions but instead of brackets we use parenthesis. These expressions are designed for situations where the generator is used right away by an enclosing function. Generator expression allows creating a generator without a yield keyword.

generator = (num ** 2 for num in range(10))
for num in generator: 
    print(num) 


Iterable is an object, which one can iterate over. It generates an Iterator when passed to iter() method. Iterator is an object, which is used to iterate over an iterable object using __next__() method.
