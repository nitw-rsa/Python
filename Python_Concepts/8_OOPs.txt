Class variables are those variables whose values are assigned inside class. Instance variables or attributes are defined in constructor or class methods.


Class variables can be accessed by class name or class object both the ways. But instance variables can not be accessed via class name. They only accessed by calss object.


We can define instance variables inside normal methods also.


If we use __ before any attribute name then that attribute will not be directly accessable form outside.

class MyClass:
    # Hidden member of MyClass 
    __hiddenVariable = 0

    # A member method that changes 
    # __hiddenVariable 
    def add(self, increment):
        self.__hiddenVariable += increment
        print(self.__hiddenVariable)

myObject = MyClass()
myObject.add(2)
myObject.add(5)
# This line causes error 
print(myObject.__hiddenVariable) 
But we can access it using this trick-
print(myObject._MyClass__hiddenVariable)


Method overriding-
when child class inherit some method from parent class and that method is modified in child class that is called as method overriding.


class or static variables are shared by all the objects. Python does not required static keyword, all the variables which are declared inside class decleration are class level static variables.


We should be careful when changing value of class variable. If we try to change class variable using object, a new instance(or non-static) variable for that particular object is created and this variable shadows the class variables. So we should always change the class variable by class name itstead of its object.


In python destructor is called by default when all the ref to that object is deleted.


If your instances are involved in circular references they will live in memory for as long as the application run.


1. vars()- This function displays the attribute of an instance in the form of an dictionary.
2. dir()- This function displays more attributes than vars function,as it is not limited to instance. It displays the class attributes as well.


Method overriding- when same method is re-defined in child class.
